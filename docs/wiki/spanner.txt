{{lowercase}}
[[spanner]] facilitates builds of conary packages from git repo forests
defined in [[Continuous_Delivery_Pipeline_build_phase|WMS]]. It is one of
several [[sandbox development tools for vApps]].

==About==

[[spanner]] is a command line tool written in python to automate building
packages from multiple git repos into conary packages consumable for vApps.
[[spanner]] leverages [[Continuous_Delivery_Pipeline_build_phase|WMS]] and git
to enable continuous integration builds. Spanner automates building packages
from  multiple git repos into conary packages as well as building conary
groups after build runs.
 

==Overview==

[[spanner]] requires a [[Continuous_Delivery_Pipeline_build_phase|WMS]]
control repo with a directory of bob-plans. The bob-plans directory must
contain specific directories.

<pre>
    Project/
        ├ ─ ─ control.yaml # Contains a list of git repos to add to your
forest
        ├── bob-plans
            ├── config # Config files for bob.
            ├── external # Packages built outside spanner on conary label
            ├── products # Conary Groups or Conary Pkgs that depend on
projects or projects group 
            └── projects # Conary Pkgs built by spanner
</pre>

spanner also requires a [[Continuous_Delivery_Pipeline_build_phase|WMS]] url.

ie:   http://wheresmystuff.unx.sas.com/api/repos/gerrit-pdt/tools:build-tools

==How it works==

High Level

[[spanner]] uses a directory structure populated with config files and build
plans for all the packages it intends to build. This directories are located
in the control git repo of a git forest. This provides version control and
branching. [[spanner]] snapshots the control repo, reads the plan files, and
creates a set of packages. The tool then iterates through the set and checks
the git repo for its commit and compares it to the version of the package in
the corresponding conary repo. If the commit and the version do not match
[[spanner]] passes the package off to bob the builder to be built, setting the
version to the commit revision of the git repo. Upon success spanner updates
the package version in the set and proceeds to process. Once all the builds
are finished [[spanner]] can build a group of the specific versions of all the
packages in the build plans and include external packages not built by spanner
with build plans located in the external directory.

Procedure

* Fetch Plans - Snapshot the git control repo
* Read Plans - Read the plans in the projects, products, external, and config
* directories
* Check Plans - Check the git commit versions and the conary versions of the
* packages and set flag for build
* Build Packages - Build all packages marked as changed
* Group Build - [Optional] Build a group from all packages in the projects dir
* and optionally include packages from the external dir
* Product Build - [Optional] Build plans located from the products dir.


==Adding packages to build==

Clone bobplans from git repo and checkout branch
Add git repo name to control.yaml
Create a new plan in bob-plans/projects
Commit changes to repo

==Examples==

Download control repo

<source lang='bash'>
git clone
http://gitgrid.unx.sas.com/cgit/VirtualApplications/Infrastructure/utilities.ci.bobplans

cd utilities.ci.bobplans/

# checkout the branch you are working on
git checkout 5

echo "- <git repo>" >> control.yaml

cd bob-plans/

./create_project <git repo> <conary recipe name> 
</source>

Example plan for project

<pre>
includeConfigFile ../config/common.conf

scm thirdparty_ant wms
gitgrid/VirtualApplications/Infrastructure/thirdparty.ant %(branch)s

targetLabel %(ci_label)s

target sasinside-thirdparty-ant

[target:sasinside-thirdparty-ant]
version %(version)s.%(scm)s
scm thirdparty_ant
sourceTree thirdparty_ant recipes/
flavor_set x86_64
</pre>


Example command line 

<source lang='bash'>

/usr/bin/spanner build
http://wheresmystuff.unx.sas.com/api/repos/gitgrid/VirtualApplications:Infrastructure:utilities.ci.bobplans
--branch 5 --group --debug-logging

</source>

==Command Description==

===spanner-build===

 spanner build <uri> <options>

Spanner build command builds git repos into conary packages from bob plans
using a wms control site. Spanner uses a config directory (projects) populated
with build plans for all the packages it intends to build. This directory is
located in a git repo for version control and branching. Git information is
located using WMS. WMS keeps track of the important information from git repos
in a rest interface. As well as creating a forest of git repos using a
control.yaml file containing all pertaining repos in the control git repo.
Spanner leverages the WMS REST interface to find all related git information.
In build mode spanner reads WMS control file for revisions, checks out the
plans from the control repo, reads the config files, and creates a list of
packages to build. The tool then iterates through the list and checks the git
commit version and compares it to the version of the package in the
corresponding conary repo. If the commit and the version do not match spanner
passes the package off to bob the builder to be built. When the group switch
is specified spanner uses the versions of the packages from the build run to
create a conary group on the conary label in the group.conf file. When the
includeExternal value is set to True in group.conf spanner will include
external packages not built by spanner with build plans located in the
external directory.

===spanner-plan===

 spanner plan <uri> <options> 

Create bob-plans templates from wms git repo forest

==Command Reference==

===Main===

   build  Build all packages that have changed in the git forest.

   plan   Make a set of bob plan templates for a git forest.

   config Show spanner config

===Options===

   --branch=BRANCH
          Specifies the branch to build. Defaults to master  if  not  sup-
          plied ie: --branch master

   --cfgfile=CFGFILE
          Specifies  a specific spannerrc. Defaults to none using internal
          hard coded config. Not required in most instances.   ie:  --cfg-
          file ~/spannerrc

   --debug-logging
          Toggles  debug log level on. Defaults to off (quiet) if not sup-
          plied. Provides useful output when run in jenkins.

   --dry-run
          Toggles test mode on. Defaults to off. Used on initial  runs  to
          test outputs. usually paired with --debug-logging

   --group
          Toggles  group  build  on. Defaults to off. When on spanner will
          create a group at the end of the  build  run.  The  contents  of
          which  include all packages in projects and optionally the pack-
          ages specified in external directories. Uses  a  special  config
          file group.conf in the config directory.

   --products
          Toggles  products build on. Defaults to off. Builds the plans in
          the products directory. Used for packages or group  builds  that
          require pkgs in projects to be built before building.




==Contacts==

Contact [[Brett Smith]] at [mailto:bc.smith@sas.com bc.smith@sas.com] for
questions about this tool.


[[Category:Sandbox development tools for vApps]]

